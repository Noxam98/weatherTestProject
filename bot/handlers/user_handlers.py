# handlers/user_handlers.py
from aiogram import Router, F, Bot, types
from aiogram.filters import Command
from aiogram.types import InlineQuery, InlineQueryResultArticle, InputTextMessageContent
from aiogram.utils.keyboard import InlineKeyboardBuilder
from services.weather_api import WeatherAPI
from uuid import uuid4
import os

router = Router()

def get_search_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(
        text="üîç –ü–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–∞", 
        switch_inline_query_current_chat=""
    )
    return builder.as_markup()

def get_weather_keyboard(lat: float, lon: float, city_name: str):
    builder = InlineKeyboardBuilder()
    builder.button(
        text="üì• –°–∫–∞—á–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (JSON)",
        callback_data=f"get_stats:{lat}:{lon}:{city_name}"
    )
    builder.button(
        text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫",
        switch_inline_query_current_chat=""
    )
    return builder.as_markup()

@router.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ–≥–æ–¥—ã.\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–∞:",
        reply_markup=get_search_keyboard()
    )

@router.inline_query()
async def inline_query_handler(query: InlineQuery, weather_api: WeatherAPI):
    if len(query.query) < 2:
        return await query.answer(
            results=[
                InlineQueryResultArticle(
                    id=str(uuid4()),
                    title="üîç –ü–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–∞",
                    input_message_content=InputTextMessageContent(
                        message_text="–î–ª—è –ø–æ–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 –±—É–∫–≤—ã"
                    ),
                    description="–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 –±—É–∫–≤—ã –¥–ª—è –ø–æ–∏—Å–∫–∞"
                )
            ],
            cache_time=1
        )

    cities = await weather_api.search_cities(query.query)
    
    if not cities:
        return await query.answer(
            results=[
                InlineQueryResultArticle(
                    id=str(uuid4()),
                    title="‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    input_message_content=InputTextMessageContent(
                        message_text="–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ."
                    ),
                    description="–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º"
                )
            ],
            cache_time=300
        )

    results = []
    for city in cities:
        weather_data = await weather_api.get_weather(city['lat'], city['lon'], city['name'])
        if weather_data:
            city_name = f"{city['name']}, {city.get('country', '')}"
            temperature = weather_data['temperature']
            description = weather_data['description']
            humidity = weather_data['humidity']
            feels_like = weather_data.get('feels_like', temperature)
            pressure = weather_data.get('pressure', 'N/A')
            wind_speed = weather_data.get('wind_speed', 'N/A')
            weather_icon = weather_data.get('icon', '01d')
            
            message_text = (
                f"üèô –ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {city_name}:\n\n"
                f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature}¬∞C\n"
                f"üå° –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feels_like}¬∞C\n"
                f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                f"üå™ –î–∞–≤–ª–µ–Ω–∏–µ: {pressure} hPa\n"
                f"üí® –í–µ—Ç–µ—Ä: {wind_speed} –º/—Å\n"
                f"‚òÅÔ∏è {description.capitalize()}"
            )
            
            title = f"{city['name']} ({city['country']}): {temperature}¬∞C"
            description_text = f"{description.capitalize()}, –í–µ—Ç–µ—Ä: {wind_speed} –º/—Å"
            
            results.append(
                InlineQueryResultArticle(
                    id=str(uuid4()),
                    title=title,
                    description=description_text,
                    input_message_content=InputTextMessageContent(
                        message_text=message_text,
                        parse_mode="HTML"
                    ),
                    reply_markup=get_weather_keyboard(
                        city['lat'],
                        city['lon'],
                        city['name']
                    ),
                    thumb_url=f"https://openweathermap.org/img/w/{weather_icon}.png",
                    thumb_width=50,
                    thumb_height=50
                )
            )

    await query.answer(results, cache_time=300)

@router.callback_query(lambda c: c.data.startswith('get_stats:'))
async def get_stats_callback(callback_query: types.CallbackQuery, weather_api: WeatherAPI, bot: Bot):
    _, lat, lon, city_name = callback_query.data.split(':')
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –Ω–µ–¥–µ–ª—é
        weekly_stats = await weather_api.get_weekly_stats(float(lat), float(lon), city_name)
        
        # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º user_id –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        filename = f"weather_stats_{callback_query.from_user.id}_{city_name.lower().replace(' ', '_')}.json"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ JSON
        weather_api.save_to_json(weekly_stats, filename)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        doc = types.FSInputFile(filename)
        await bot.send_document(
            callback_query.from_user.id,
            document=doc,
            caption=f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–≥–æ–¥—ã –∑–∞ 5 –¥–Ω–µ–π –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_name}"
        )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(filename)
        
        await callback_query.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
        
    except Exception as e:
        await callback_query.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}", show_alert=True)
